{"version":3,"sources":["components/UsersTable.js","components/UserProfile.js","App.js","index.js"],"names":["UsersTable","props","usersList","users","length","map","user","index","className","src","picture","thumbnail","alt","name","first","email","Date","registered","date","toLocaleDateString","location","city","street","number","onClick","info","openModal","loading","refresh","style","cursor","dataLength","next","more","hasMore","loader","UserProfile","large","login","username","title","last","dob","age","country","back","App","useState","modal","state","setState","useEffect","fetch","then","response","json","data","console","log","prev","results","min","max","setInfo","handleModalClose","randomUser","Math","ceil","floor","random","modalBody","href","concat","Modal","open","onClose","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.1321be5d.chunk.js","sourcesContent":["import InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport { FaHeart, FaSync } from \"react-icons/fa\";\r\n\r\n// Таблица пользователей\r\nexport default function UsersTable(props) {\r\n  let usersList = (\r\n    <tr>\r\n      <td>Загрузка...</td>\r\n    </tr>\r\n  );\r\n  if (props.users.length)\r\n    usersList = props.users.map((user, index) => (\r\n      <tr key={index}>\r\n        <td className=\"user-col\">\r\n          <img src={user.picture.thumbnail} alt={user.name.first} />\r\n          <p>{user.name.first + \" \" + user.email}</p>\r\n        </td>\r\n        <td>{new Date(user.registered.date).toLocaleDateString()}</td>\r\n        <td>\r\n          {user.location.city +\r\n            \" \" +\r\n            user.location.street.name +\r\n            \" \" +\r\n            user.location.street.number}\r\n        </td>\r\n        <td>\r\n          <div className=\"btn btn-info\" onClick={() => props.info(user)}>\r\n            details\r\n          </div>\r\n        </td>\r\n      </tr>\r\n    ));\r\n\r\n  return (\r\n    <>\r\n      <h1>Таблица пользователей</h1>\r\n      <div className=\"table-icons\">\r\n        <span className=\"fa-heart\" onClick={props.openModal}>\r\n          <FaHeart />\r\n        </span>\r\n        <span\r\n          className={props.loading ? \"loading\" : \"\"}\r\n          onClick={() => props.refresh()}\r\n        >\r\n          <FaSync style={{ cursor: \"pointer\" }} />\r\n        </span>\r\n      </div>\r\n      <InfiniteScroll\r\n        dataLength={props.users.length}\r\n        next={props.more}\r\n        hasMore={true}\r\n        loader={<h4>Loading...</h4>}\r\n      >\r\n        <table className=\"table table-hover table-bordered\">\r\n          <thead className=\"thead-dark\">\r\n            <tr>\r\n              <th>User</th>\r\n              <th>Registration Date</th>\r\n              <th>Address</th>\r\n              <th></th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>{usersList}</tbody>\r\n        </table>\r\n      </InfiniteScroll>\r\n    </>\r\n  );\r\n}\r\n","export default function UserProfile(props) {\r\n  return (\r\n    <div className=\"card user-profile\">\r\n      <img\r\n        className=\"card-img-top\"\r\n        src={props.user.picture.large}\r\n        alt={props.user.login.username}\r\n      />\r\n      <div className=\"card-body\">\r\n        <h5 className=\"card-title\">\r\n          {props.user.name.title +\r\n            \" \" +\r\n            props.user.name.first +\r\n            \" \" +\r\n            props.user.name.last +\r\n            \" \" +\r\n            props.user.dob.age}\r\n        </h5>\r\n        <p className=\"card-text\">\r\n          {props.user.location.country + \" \" + props.user.location.city}\r\n        </p>\r\n        <div className=\"btn btn-info\" onClick={() => props.back(false)}>\r\n          back{\" \"}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import \"./styles.css\";\nimport { useEffect, useState } from \"react\";\n\nimport UsersTable from \"./components/UsersTable\";\nimport UserProfile from \"./components/UserProfile\";\nimport Modal from \"@material-ui/core/Modal\";\n\nexport default function App() {\n  // initial state\n  const [state, setState] = useState({\n    users: [], // массив пользователей\n    info: false, // страница пользователя\n    loading: true, // статус загрузки\n    modal: false // включает модальное окно\n  });\n  // Получаем users при загрузке\n  useEffect(() => {\n    fetch(\"https://randomuser.me/api/?results=50\")\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        console.log(data);\n        setState((prev) => ({\n          ...prev,\n          loading: false,\n          users: data.results\n        }));\n      });\n  }, []);\n\n  // обновить всех пользователей\n  const refreshData = () => {\n    setState((prev) => ({\n      ...prev,\n      loading: true\n    }));\n    fetch(\"https://randomuser.me/api/?results=50\")\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        //console.log(data);\n        setState((prev) => ({\n          ...prev,\n          loading: false,\n          users: data.results\n        }));\n      });\n  };\n  // получаем по 10 пользователей при прокрутке\n  const fetchMoreData = () => {\n    fetch(\"https://randomuser.me/api/?results=10\")\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        console.log(data);\n        setState((prev) => ({\n          ...prev,\n\n          users: state.users.concat(data.results)\n        }));\n      });\n  };\n\n  // переключение режим страницы пользователя\n  const setInfo = (user) => {\n    setState((prev) => ({\n      ...prev,\n      info: user\n    }));\n  };\n\n  // открывает модальное окно\n  const handleModalOpen = () => {\n    setState((prev) => ({\n      ...prev,\n      modal: true\n    }));\n  };\n\n  // закрывает\n  const handleModalClose = () => {\n    setState((prev) => ({\n      ...prev,\n      modal: false\n    }));\n  };\n  // случайный пользователь из загруженных\n  let randomUser = state.users[getRandomInt(0, state.users.length)];\n\n  // html модального окна\n  const modalBody = randomUser ? (\n    <div className=\"card user-profile\">\n      <img\n        className=\"card-img-top\"\n        src={randomUser.picture.large}\n        alt={randomUser.login.username}\n      />\n      <div className=\"card-body text-center\">\n        <h5>Random user</h5>\n        <h5 className=\"card-title\">{randomUser.name.first}</h5>\n        <p className=\"card-text\">{randomUser.email}</p>\n        <div className=\"btn btn-info\" onClick={() => handleModalClose()}>\n          close\n        </div>\n      </div>\n    </div>\n  ) : (\n    <div>Loading...</div>\n  );\n  // вспомогательная функция\n  function getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min)) + min; //Максимум не включается, минимум включается\n  }\n\n  return (\n    <div className=\"App container\">\n      <p>\n        {\" \"}\n        Тестовое задание ТГ{\" \"}\n        <a href=\"https://github.com/grigorev-web/test_TG\">исходный код</a>\n      </p>\n      {state.info ? (\n        <UserProfile user={state.info} back={setInfo} />\n      ) : (\n        <UsersTable\n          users={state.users}\n          more={fetchMoreData}\n          info={setInfo}\n          loading={state.loading}\n          refresh={refreshData}\n          openModal={handleModalOpen}\n        />\n      )}\n      <Modal\n        open={state.modal}\n        onClose={handleModalClose}\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n      >\n        {modalBody}\n      </Modal>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}